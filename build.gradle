plugins {
    id 'application'
    id 'checkstyle'
    id 'org.springframework.boot' version '2.4.9'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.adarshr.test-logger' version '2.1.1'
    id 'com.github.ben-manes.versions' version '0.38.0'
    id 'org.liquibase.gradle' version '2.0.4'
    id 'jacoco'
    id 'org.siouan.frontend-jdk11' version '6.0.0'
    id 'org.springdoc.openapi-gradle-plugin' version '1.5.0'
    id 'com.github.johnrengelman.processes' version '0.5.0'
}

group = 'hexlet.code'
version = '1.0-SNAPSHOT'
sourceCompatibility = '17'

application {
    mainClass = 'hexlet.code.AppApplication'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-actuator',
            'org.springframework.boot:spring-boot-starter-validation',
            'org.springframework.boot:spring-boot-starter-security',
            'org.liquibase:liquibase-core:4.17.2',
            'com.querydsl:querydsl-core:5.0.0',
            'com.querydsl:querydsl-jpa:5.0.0',
            'io.jsonwebtoken:jjwt:0.9.1',
            'org.springdoc:springdoc-openapi-ui:1.5.12',
            'com.rollbar:rollbar-spring-webmvc:1.8.1',
    )

    annotationProcessor(
            'org.projectlombok:lombok:1.18.22',
            'com.querydsl:querydsl-apt:5.0.0:jpa',
            'javax.annotation:javax.annotation-api:1.3.2',
            'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final'
    )

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    compileOnly 'org.projectlombok:lombok:1.18.22'

    runtimeOnly(
            'com.h2database:h2:1.4.200',
            'org.postgresql:postgresql:42.5.0'
    )

    liquibaseRuntime(
            sourceSets.main.output,
            'org.liquibase:liquibase-core:4.6.1',
            'org.liquibase.ext:liquibase-hibernate5:4.17.2',
            'org.springframework.boot:spring-boot-starter-data-jpa'
    )

    testImplementation(
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.security:spring-security-test:5.5.1',
            'org.springframework.boot:spring-boot-starter-test'
    )
}

wrapper {
    gradleVersion = '7.5.1'
    distributionType = Wrapper.DistributionType.ALL
}

compileJava {
    options.release = 17
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

diffChangeLog {
    dependsOn compileJava
}

liquibase {
    activities {
        main {
            changeLogFile 'src/main/resources/db/changelog/changelog-master.xml'
            url 'jdbc:h2:./taskTracker'
            username ''
            password ''
            referenceUrl 'hibernate:spring:hexlet.code.model' +
                    '?dialect=org.hibernate.dialect.H2Dialect' +
                    '&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy'
        }
    }
}

frontend {
    nodeVersion = '16.13.1'
    installScript = 'install'
    assembleScript = 'run build'
    packageJsonDirectory = file("${projectDir}/frontend")
}

def configFrontendTasks = {
    inputs.files(fileTree("$projectDir/frontend").exclude('build', 'node_modules'))
    outputs.dir("$buildDir/resources/main/static")
}

assembleFrontend {
    configure configFrontendTasks

    doLast {
        copy {
            from "$projectDir/frontend/build"
            into "$buildDir/resources/main/static"
        }
    }
}

installFrontend {
    configure configFrontendTasks
}

processResources.dependsOn assembleFrontend

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

jacoco {
    toolVersion = "0.8.8"
}

testlogger {
    showStandardStreams true
}
